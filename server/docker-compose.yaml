version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: my_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2182:2181'
    networks:
      - my-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka_container
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'kafka-test:1:1'
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    networks:
      - my-network

  nestjs-app:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '10050:10050'
    restart: always
    depends_on:
      - postgres
    networks:
      - my-network

volumes:
  postgres_data:

networks:
  my-network:
